name: Linux

on:
  # allows us to run workflows manually
  workflow_dispatch:
  pull_request:
    branches:
      - develop
      - master
  push:
    branches:
      - develop
      - master

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  main:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - cubit: 17.1.0
            os: ubuntu-18.04
            URL: LINUX_CUBIT_17_1_0
            URL_SDK: LINUX_CUBIT_SDK_17_1_0
            
          - cubit: 2020.2
            os: ubuntu-20.04
            URL: LINUX_CUBIT_2020_2
            URL_SDK: LINUX_CUBIT_SDK_2020_2

    name: 'Trelis/Cubit Svalinn Plugin ${{ matrix.cubit }} Build for Linux'


    steps:
      - uses: actions/checkout@v2

      - name: Environment Variables
        run: |
          echo "CURRENT=$(pwd)" >> $GITHUB_ENV
          echo "SCRIPTPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "PLUGIN_ABS_PATH=$GITHUB_WORKSPACE/.." >> $GITHUB_ENV
          echo "GHA=ON" >> $GITHUB_ENV
          echo "FOLDER_PKG=$GITHUB_WORKSPACE/../pkg" >> $GITHUB_ENV
          if [ "${{ matrix.cubit }}" = "17.1.0" ]; then
            echo "CUBIT_PATH=/opt/Trelis-17.1" >> $GITHUB_ENV
            echo "CMAKE_ADDITIONAL_FLAGS=-DCMAKE_CXX_FLAGS=-D_GLIBCXX_USE_CXX11_ABI=0" >> $GITHUB_ENV
          else
            echo "CUBIT_PATH=/opt/Coreform-Cubit-2020.2" >> $GITHUB_ENV
          fi
          source $GITHUB_WORKSPACE/scripts/linux_share_build.sh
          GHA=ON setup_var ${{ matrix.cubit }}

 
      - name: Downloading packages
        env:   
          CUBIT_DEB_URL: ${{ secrets[matrix.URL] }}
          CUBIT_SDK_URL: ${{ secrets[matrix.URL_SDK] }}
        run: |
          mkdir -p $FOLDER_PKG
          cd $FOLDER_PKG
          echo ${TRELIS_PKG}
          curl -L https://uwmadison.box.com/shared/static/${CUBIT_DEB_URL}.deb --output ${TRELIS_PKG}
          curl -L https://uwmadison.box.com/shared/static/${CUBIT_SDK_URL}.gz --output ${TRELIS_SDK_PKG}


      - name: Apt dependencies
        shell: bash
        run: |
          source $GITHUB_WORKSPACE/scripts/linux_share_build.sh
          sudo install_prerequisites()

       
      - name: Build MOAB
        shell: bash
        run: |
          source $GITHUB_WORKSPACE/scripts/linux_share_build.sh
          build_moab()

      - name: build DAGMC
        shell: bash
        run: |
          source $GITHUB_WORKSPACE/scripts/linux_share_build.sh
          build_dagmc()

      - name: Trelis setup
        shell: bash
        env:   
          CUBIT_DEB_URL: ${{ secrets[matrix.URL] }}
          CUBIT_SDK_URL: ${{ secrets[matrix.URL_SDK] }}
        run: |
          source $GITHUB_WORKSPACE/scripts/linux_share_build.sh
          setup_Trelis_sdk()

      - name: build plugin
        shell: bash
        run: |
          cd ${PLUGIN_ABS_PATH}/Trelis-plugin
          git submodule update --init
          cd ../
          mkdir -pv bld
          cd bld
          cmake ../Trelis-plugin $CMAKE_ADDITIONAL_FLAGS \
                -DCUBIT_ROOT=${CUBIT_PATH} \
                -DDAGMC_DIR=${PLUGIN_ABS_PATH}/DAGMC \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX=${PLUGIN_ABS_PATH}
          make -j`grep -c processor /proc/cpuinfo`
          make install

      - name: prepare pkg
        shell: bash
        run: |
          cd ${PLUGIN_ABS_PATH}
          mkdir -p pack/bin/plugins/svalinn
          cd pack/bin/plugins/svalinn

          # Copy all needed libraries into current directory
          cp -pPv ${PLUGIN_ABS_PATH}/lib/* .
          cp -pPv ${PLUGIN_ABS_PATH}/moab/lib/libMOAB.so* .
          cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libdagmc.so* .
          cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libmakeWatertight.so* .
          cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libpyne_dagmc.so* .
          cp -pPv ${PLUGIN_ABS_PATH}/DAGMC/lib/libuwuw.so* .
          cp -pPv /usr/lib/x86_64-linux-gnu/libhdf5_serial.so* .
          chmod 644 *

          # Set the RPATH to be the current directory for the DAGMC libraries
          patchelf --set-rpath ${CUBIT_PATH}/bin/plugins/svalinn libMOAB.so
          patchelf --set-rpath ${CUBIT_PATH}/bin/plugins/svalinn libdagmc.so
          patchelf --set-rpath ${CUBIT_PATH}/bin/plugins/svalinn libmakeWatertight.so
          patchelf --set-rpath ${CUBIT_PATH}/bin/plugins/svalinn libpyne_dagmc.so
          patchelf --set-rpath ${CUBIT_PATH}/bin/plugins/svalinn libuwuw.so

          # Create the Svalinn plugin tarball
          cd ..
          ln -sv svalinn/libsvalinn_plugin.so .
          cd ../..
          tar --sort=name -czvf svalinn-plugin_linux_cubit_${{ matrix.cubit }}.tgz bin

      - name: 'Upload package'
        uses: actions/upload-artifact@v2
        with:
          name: svalinn-plugin_linux_${{ matrix.cubit }}
          path: /home/runner/work/Trelis-plugin/pack/svalinn-plugin_linux_cubit_${{ matrix.cubit }}.tgz
